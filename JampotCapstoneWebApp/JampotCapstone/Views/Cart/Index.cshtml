@using System.Globalization
@model CartViewModel
@{
    ViewData["Title"] = "View Cart";
}
<head>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js" crossorigin="anonymous"></script>
    <script src="https://sandbox.web.squarecdn.com/v1/square.js" type="text/javascript"></script>
    <script src="~/js/square-payments.js" type="module"></script>
</head>
<div class="text-center">
    <h1 class="display-3 title text-jampot-green">VIEW CART</h1>
</div>
<div class="container content text-jampot-yellow" style="font-size:30px">
    <hr class="yellowLine"/>
    @if (Model.Items.Count == 0)
    {
        <p>Your cart is empty.</p>
    }
    else
        {
            @foreach (var item in Model.Items) 
            {
            <p id="empty-cart-message" style="display:none;">Your cart is empty.</p>
                <div id="cart-item-@item.ProductId" class="product-row">
                    <img src="@item.ProductPhoto.FileName" alt="@item.ProductName" class="product-img" />
                    <div class="product-details">
                        <div class="product-info">
                            <p>@item.ProductName</p>
                            <p>@item.ProductPrice.ToString("C", new CultureInfo("en-us"))</p>
                        </div>
                        <div class="quantity-control">
                        <button onclick="addToCart(@item.ProductId)" class="qty-btn fa fa-plus"></button>
                        <span id="loading-spinner-@item.ProductId" class="spinner-border spinner-border-sm" role="status" aria-hidden="true" style="display:none;"></span>
                        <span id="qty-number-@item.ProductId" class="qty-number">@item.Quantity.ToString()</span>
                        <button id="remove-btn-@item.ProductId" onclick="removeFromCart(@item.ProductId)" class="qty-btn">
                            <i id="remove-icon-@item.ProductId" class="fa fa-minus"></i>
                        </button>
                    </div>
                    </div>
                </div>
            }
        <hr class="yellowLine" />
        <div id="cart-summary">
            <div class="price-line">
                <span>Subtotal:</span>
                <span id="cart-total-price">@Model.TotalPrice.ToString("C", new CultureInfo("en-us"))</span>

                <!--price tracker for square submission-->
                <input type="hidden" id="cartSubtotal" value="@Model.TotalPrice" />
            </div>
            <div class="price-line">
                <span>Total Items:</span>
                <span id="cart-total-qty">@Model.TotalQuantity</span>
            </div>
        </div>
        }
    <hr class="yellowLine" />

    <div class="row">
        <button type="button" id="placeOrderBtn" data-bs-toggle="modal" data-bs-target="#squarePaymentModal" class="btn btn-warning col-6 col-md-3 mx-auto m-3" style="font-size:30px">
            PLACE ORDER
        </button>
    </div>

    <!--Modal for Square Checkout-->
    <div id="squarePaymentModal" class="modal" role="dialog">
        <div class="modal-dialog modal-dialog-centered modalDialogue">
            <div class="modal-content modalContent">
                <div class="modal-header modalHeader">
                    <h4 class="modal-title">Finalize Payment</h4>
                    <button type="button" class="close" data-bs-dismiss="modal">&times;</button>
                </div>
                <div class="modal-body">
                    <form id="payment-form">
                        @Html.AntiForgeryToken()
                        <div id="card-container"></div>
                        <div class="mt-3">
                            <p class="modalText">
                                Don't want to pay with your card online? Give us a call and place
                                your order with us over the phone to gain Square rewards points!
                            </p>
                            <p class="modalText">
                                (808) 238-0671
                            </p>
                        </div>
                        <button type="submit" class="btn btn-primary">Pay Now</button>
                    </form>
                </div>
                <div class="modal-footer modalFooter">
                    <button type="button" class="btn btn-default" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!--Modal for successful payment-->
    <div id="paymentSuccessModal" class="modal fade" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-success text-white">
                    <h5 class="modal-title">Order Confirmed</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Thank you for your order! Your payment has been processed successfully.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!--Script for updating/removing things from the cart-->
<script>
    function getAntiForgeryToken() {
        return document.querySelector('input[name="__RequestVerificationToken"]')?.value;
    }

    document.addEventListener('DOMContentLoaded', function () {
    @if (Model.Items != null)
    {
        @foreach (var item in Model.Items)
        {
            @:updateRemoveButton(@item.ProductId, @item.Quantity);
        }
    }
    });

    function removeFromCart(productId) {
        let qtyElement = document.getElementById('qty-number-' + productId);
        let spinner = document.getElementById('loading-spinner-' + productId);
        let cartItemElement = document.getElementById('cart-item-' + productId);

        spinner.style.display = "inline-block";

        fetch('/Cart/RemoveFromCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({ productId: productId })
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                if (data.newQuantity == 0){
                    if (cartItemElement){
                        cartItemElement.remove();
                        if (data.totalCartQuantity === 0) {
                            document.getElementById('empty-cart-message').style.display = 'block';
                            document.getElementById('cart-summary').style.display = 'none';
                        }
                    }
                } else {
                    qtyElement.innerText = data.newQuantity;
                    updateRemoveButton(productId, data.newQuantity);
                } 
                
                let totalQtyElement = document.getElementById('cart-total-qty');
                if (totalQtyElement) {
                    totalQtyElement.innerText = data.totalCartQuantity;
                }

                let totalPriceElement = document.getElementById('cart-total-price');
                if (totalPriceElement) {
                        totalPriceElement.innerText = data.totalCartPrice.toLocaleString("en-US", {
                            style: "currency",
                            currency: "USD"
                        });
                }
            } else {
                alert('Failed to remove item.');
            }
        })
        .catch(error => {
            console.error('Error removing item:', error);
            qtyElement.innerText = "Error!";
        })
        .finally(() => {
            // Hide the spinner after the request is done
            spinner.style.display = "none";
        });
    }

    function addToCart(productId){
        let qtyElement = document.getElementById('qty-number-' + productId);
        let spinner = document.getElementById('loading-spinner-' + productId);

        spinner.style.display = "inline-block"; 

        fetch('/Cart/AddToCart', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': getAntiForgeryToken()
            },
            body: JSON.stringify({productId: productId})
        })
        .then(response => response.json())
        .then(data => {
              if (data.success) {
                qtyElement.innerText = data.newQuantity;
                updateRemoveButton(productId, data.newQuantity);

                let totalQtyElement = document.getElementById('cart-total-qty');
                if (totalQtyElement) {
                    totalQtyElement.innerText = data.totalCartQuantity;
                }

                let totalPriceElement = document.getElementById('cart-total-price');
                if (totalPriceElement) {
                     totalPriceElement.innerText = data.totalCartPrice.toLocaleString("en-US", {
                            style: "currency",
                            currency: "USD"
                        });
                }
            } else {
                alert('Failed to add item.');
            }
        })
         .catch(error => {
            console.error('Error adding item:', error);
            qtyElement.innerText = "Error!";
        })
        .finally(() => {
            // Hide the spinner after the request is done
            spinner.style.display = "none";
        });
    }

    function updateRemoveButton(productId, quantity) {
        let removeIcon = document.getElementById('remove-icon-' + productId);

        if (quantity <= 1) {
            // Change to trash can
            removeIcon.classList.remove('fa-minus');
            removeIcon.classList.add('fa-trash');
        } else {
            // Change back to minus
            removeIcon.classList.remove('fa-trash');
            removeIcon.classList.add('fa-minus');
        }
    }
</script>

