@using System.Globalization
@model List<Product>
@{
    ViewBag.Title = "Order Page";
    Layout = "_Layout";
}
<div class="row order-filter">
    <form class="col-lg-3 col-md-6 mt-2 p-0 offset-2 offset-md-0" method="get" asp-action="Search" asp-controller="Order">
        <label for="search" class="col-form-label-lg text-jampot-yellow first-element">Search</label>
        <input id="search" name="key"/>
        <button type="submit" class="fab fa-searchengin btn fs-5 text-jampot-yellow bg-jampot-green last-element"></button>
    </form>
    <div id="food" class="col-lg-5 col-md-6 mt-2 offset-2 offset-md-0">
        <a class="btn col m-1" asp-action="Index" asp-controller="Order">All</a>
        <a class="btn col m-1" asp-action="FilterByCategory" asp-controller="Order" asp-route-type="food">Food</a>
        <a class="btn col m-1" asp-action="FilterByCategory" asp-controller="Order" asp-route-type="drink">Drinks</a>
        <a class="btn col m-1" asp-action="FilterByCategory" asp-controller="Order" asp-route-type="dessert">Desserts</a>
    </div>
    <div id="allergen" class="col-lg-4 offset-2 offset-md-7 offset-lg-0 mt-2">
        <a class="btn col m-1" asp-action="FilterByTag" asp-controller="Order" asp-route-type="vegan">Vegan</a>
        <a class="btn col m-1" asp-action="FilterByTag" asp-controller="Order" asp-route-type="gluten free">Gluten-Free</a>
        <a class="btn col m-1" asp-action="FilterByTag" asp-controller="Order" asp-route-type="spicy">Spicy</a>
        <a class="col ms-1" asp-action="Index" asp-controller="Cart">
            <span class="fas fa-cart-arrow-down fs-3 bg-black text-jampot-green"></span>
            <span id="cart-count" style="font-size:10px;"class="position-absolute translate-middle badge rounded-pill bg-danger">
                0
            </span>
        </a>
    </div>
</div>
<div class="row">
    @if (Model.Any())
    {
        List<ProductType> categories = [];
        foreach (Product p in Model)
        {
            foreach (ProductType c in p.ProductCategory)
            {
                if (!categories.Contains(c))
                {
                    categories.Add(c);
                }
            }
        }

        // categories = categories.OrderBy(c => c.Type);
        foreach (ProductType c in categories)
        {
            bool hasProducts = false;
            <h4 class="content text-jampot-yellow order-section">
                @string.Concat(Char.ToUpper(c.Type[0]), c.Type.Substring(1, c.Type.Length - 1))
            </h4>
            foreach (Product p in Model)
            {
                if (p.ProductCategory.Contains(c))
                {
                    hasProducts = true;
                    <div class="col-lg-4 col-md-6 p-2">
                        <img src="@p.ProductPhoto.FileName" alt="@p.ProductName" class="photo rounded"/>
                        <div class="container banner text-dark content rounded-bottom">
                            <div class="row">
                                <p class="col-md fs-4">@p.ProductName</p>
                                <p class="col-md-3">@p.ProductPrice.ToString("C", new CultureInfo("en-us"))</p>
                            </div>
                            <div class="row">
                                <p class="col-md">@p.ProductIngredients</p>
                                <button class="col-md-3 btn btn-jampot align-self-start order-btn" data-product-id="@p.ProductId">Order</button>
                            </div>
                        </div>
                    </div>
                }
            }

            if (!hasProducts)
            {
                <div>There are no products in this category.</div>
            }
        }
    }
</div>
<div id="notification" class="notification">
    @if (TempData["AddToCartMessage"] != null)
    {
        <div class="alert alert-@TempData["NotificationType"]" id="cart-notification">
            @TempData["AddToCartMessage"]
        </div>
    }
</div>

<!--Script for increasing cart badge number, as well as not reloading the page when the users adds an item to the cart-->
<script>
    let fadeOutTimeout; // Global variable to hold the fade-out timeout reference

    function updateCartCount() {
        fetch('/Cart/GetCartQuantity')
            .then(response => response.json())
            .then(data => {
                const cartCount = document.getElementById('cart-count');
                if (cartCount) {
                    cartCount.textContent = data.totalCartQuantity;
                }
            });

    }
    document.addEventListener('DOMContentLoaded', function(){
        updateCartCount(); // always refresh cart count on load

        const orderButtons = document.querySelectorAll('.order-btn')

        orderButtons.forEach(button =>{
            button.addEventListener('click', function(){
                const productId = this.getAttribute('data-product-id');
               
                fetch('/Cart/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value
                    },
                    body: JSON.stringify({ productId: parseInt(productId) })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success){
                         // Check if there's a notification
                         const notification = document.getElementById('cart-notification');

                          if (notification) {
                            // Clear the previous fade-out timeout
                            if (fadeOutTimeout) {
                                clearTimeout(fadeOutTimeout);
                            }

                            // Show the notification
                            notification.style.display = 'block';
                            notification.style.opacity = '1';

                            // Fade out after 3 seconds
                            fadeOutTimeout = setTimeout(function() {
                                notification.style.opacity = '0'; // Fade out
                                setTimeout(function() {
                                    notification.style.display = 'none';
                                },300);
                            }, 2000); // 2 seconds
                        }
                        const cartCount = document.getElementById('cart-count');
                        if(cartCount){
                            cartCount.textContent = data.totalCartQuantity;
                        }
                    }
                    else{
                        alert('Something went wrong :(')
                    }
                });
            });
        });
    });
    // For back/forward navigation (bfcache)
    window.addEventListener('pageshow', function () {
        // set a timeout so the new cartCount is loaded before the bfcache version
        setTimeout(updateCartCount, 100);
    });
</script>
